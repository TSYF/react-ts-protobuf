/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.1
 * source: employee.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Employee extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(data?: any[] | ({
        id?: number;
        username?: string;
        profileImage?: string;
        salary?: number;
    } & (({
        password?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("profileImage" in data && data.profileImage != undefined) {
                this.profileImage = data.profileImage;
            }
            if ("salary" in data && data.salary != undefined) {
                this.salary = data.salary;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_password() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get profileImage() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set profileImage(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get salary() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set salary(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get _password() {
        const cases: {
            [index: number]: "none" | "password";
        } = {
            0: "none",
            3: "password"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        id?: number;
        username?: string;
        password?: string;
        profileImage?: string;
        salary?: number;
    }): Employee {
        const message = new Employee({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.profileImage != null) {
            message.profileImage = data.profileImage;
        }
        if (data.salary != null) {
            message.salary = data.salary;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            username?: string;
            password?: string;
            profileImage?: string;
            salary?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.profileImage != null) {
            data.profileImage = this.profileImage;
        }
        if (this.salary != null) {
            data.salary = this.salary;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeUint64(1, this.id);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.has_password)
            writer.writeString(3, this.password);
        if (this.profileImage.length)
            writer.writeString(4, this.profileImage);
        if (this.salary != 0)
            writer.writeFloat(5, this.salary);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Employee {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Employee();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                case 4:
                    message.profileImage = reader.readString();
                    break;
                case 5:
                    message.salary = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Employee {
        return Employee.deserialize(bytes);
    }
}
export class Employees extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        employees?: Employee[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("employees" in data && data.employees != undefined) {
                this.employees = data.employees;
            }
        }
    }
    get employees() {
        return pb_1.Message.getRepeatedWrapperField(this, Employee, 1) as Employee[];
    }
    set employees(value: Employee[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        employees?: ReturnType<typeof Employee.prototype.toObject>[];
    }): Employees {
        const message = new Employees({});
        if (data.employees != null) {
            message.employees = data.employees.map(item => Employee.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            employees?: ReturnType<typeof Employee.prototype.toObject>[];
        } = {};
        if (this.employees != null) {
            data.employees = this.employees.map((item: Employee) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.employees.length)
            writer.writeRepeatedMessage(1, this.employees, (item: Employee) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Employees {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Employees();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.employees, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Employee.deserialize(reader), Employee));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Employees {
        return Employees.deserialize(bytes);
    }
}
